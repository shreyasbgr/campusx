			DDL Commands

1. CREATE DATABASE

CREATE DATABASE IF NOT EXISTS mydb

2. DROP DATABASE

DROP DATABASE mydb

3. CREATE TABLE

CREATE TABLE IF NOT EXISTS users(
	id integer,
	name varchar(255),
	email varchar(255),
	password varchar(255)
)

4. DROP TABLE

DROP TABLE users

5. TRUNCATE TABLE (EMPTY THE TABLE)

TRUNCATE TABLE users

6. ADDING CONSTRAINTS TO A TABLE

	- NOT NULL
	- UNIQUE
	- PRIMARY KEY
	- FOREIGN KEY
	- CHECK
	- DEFAULT
	- AUTO_INCREMENT

UNIQUE, NOT NULL

CREATE TABLE users(
	id integer NOT NULL,
    name varchar(255),
    email varchar(255),
    CONSTRAINT U_email UNIQUE(email),
    PRIMARY KEY(id)
)

PRIMARY KEY, FOREIGN KEY

CREATE TABLE orders(
	order_id integer,
    user_id integer,
    time_of_order datetime,
    PRIMARY KEY(order_id),
    FOREIGN KEY(user_id) REFERENCES users(id)
)

CHECK

CREATE TABLE students(
	student_id integer PRIMARY KEY,
    sname varchar(255) NOT NULL,
    email varchar(255) NOT NULL UNIQUE,
    age integer CHECK(age>6 AND age<25)
)

DEFAULT

CREATE TABLE passenger(
	passenger_id integer PRIMARY KEY,
    pname varchar(255) NOT NULL,
    gender varchar(255) DEFAULT "Others" 
)

CREATE TABLE passenger(
	passenger_id integer PRIMARY KEY,
    pname varchar(255) NOT NULL,
    journey_date datetime DEFAULT CURRENT_TIMESTAMP
)

AUTO_INCREMENT

CREATE TABLE passenger(
	id integer PRIMARY KEY AUTO_INCREMENT,
    name varchar(255) NOT NULL
)

7. ALTER TABLE

	- ADD COLUMN
	- DROP COLUMN
	- MODIFY COLUMNS
	- ADD/DROP CONSTRAINT

ADD COLUMNS

ALTER TABLE students ADD COLUMN college varchar(255) NOT NULL

DROP COLUMN

ALTER TABLE students DROP COLUMN college

MODIFY COLUMN

ALTER TABLE students MODIFY COLUMN sname integer

ADD/DROP CONSTRAINT

ALTER TABLE passenger ADD CONSTRAINT P_email UNIQUE(email)
ALTER TABLE passenger DROP CONSTRAINT P_email


		DML Commands

1. INSERT INTO 

INSERT INTO students(student_id,sname,email,age) VALUES(3,"Harsh","harshmahajan927@gmail.com",24)
INSERT INTO students VALUES(5,"Shantanu","shantanuingale98@gmail.com",24);
INSERT INTO students VALUES(6,"Shantanu","shantanuingale@gmail.com",24), (7,"Harsh","harshchatterjee@gmail.com",24),(8,"Nikhil","nikhilnayak2009@gmail.com",24);

2. SELECT

SELECT * FROM train
SELECT Name,Sex,Survived FROM train
SELECT Name AS PassengerName, Sex AS Gender, Survived FROM train
SELECT Name, SibSp + Parch as family from train
SELECT Name, 100000 AS Compensation from train
SELECT DISTINCT Sex from train
SELECT DISTINCT Pclass,Embarked from train
SELECT * FROM train WHERE Survived = 0
SELECT * FROM train WHERE Pclass = 3 AND Survived = 0
SELECT * FROM train WHERE Age BETWEEN 10 AND 15
SELECT title,genre FROM movies WEHRE genre IN ('Comedy','Action','Drama')
SELECT title FROM movies WHERE title LIKE 'A%'
SELECT title FROM movies WHERE title LIKE '%man%'

ORDER OF QUERY EXECUTION

FROM JOIN WHERE GROUP BY HAVING SELECT DISTINCT ORDER BY
F 	 J	  W	    G     B  H      S      D        O
Frank John's Wicked Grave Haunts Several Dull Owls

3. UPDATE

UPDATE passenger SET name = 'Rahul'
UPDATE passenger SET name = 'Parth' WHERE email LIKE '%gmail%'
UPDATE passenger SET name = 'Ankit', email = 'abc@gmail.com' WHERE email LIKE '%yahoo%'

4. DELETE

DELETE FROM passenger WHERE id = 1
DELETE FROM passenger WHERE id > 2 AND email LIKE '%yahoo%'
DELETE FROM passenger WHERE 1 (to delete everything.. same as truncate)

5. FUNCTIONS

ABS - SELECT title,ABS((india_gross-budget) AS profit) FROM movies
ROUND (upto 1 decimal pt) - SELECT title, ROUND((runtime/60),1) AS runtime_hrs FROM movies
CEIL - SELECT title, CEIL((runtime/60),1) AS runtime_hrs FROM movies
FLOOR - SELECT title, FLOOR((runtime/60),1) AS runtime_hrs FROM movies
UPPER/LOWER (for strings) - SELECT UPPER(title) FROM movies
CONCAT - SELECT title, CONCAT(actor,' ', director) AS crew FROM movies
LENGTH - SELECT title, LENGTH(title) AS length FROM movies
SUBSTR (first char, length of substr) - SELECT title, SUBSTR(title,1,5) AS short FROM movies

AGGREGATE FUNCTIONS

MIN/MAX/SUM/AVG - SELECT MAX(budget) FROM movies
COUNT (to count all the rows) - SELECT COUNT(*) FROM movies
COUNT(DISTINCT) - SELECT COUNT(DISTINCT(actor)) FROM movies

6. ORDER BY

SELECT title,(worldwide_gross - budget) AS profit FROM movies ORDER BY profit DESC

LIMIT - SELECT title,(worldwide_gross - budget) AS profit FROM movies ORDER BY profit DESC LIMIT 5

SELECT * FROM movies ORDER BY genre,title 

7. GROUP BY

SELECT actor, COUNT(*) AS num_movies FROM movies GROUP BY actor ORDER BY num_movies DESC LIMIT 5
SELECT genre, SUM(worldwide_gross - budget) AS total_profit FROM movies GROUP BY genre ORDER BY total_profit DESC LIMIT 5
SELECT director, AVG(worldwide_gross - budget) AS avg_profit FROM movies GROUP BY director ORDER BY avg_profit DESC LIMIT 5
SELECT title,budget FROM movies GROUP BY title ORDER BY budget DESC LIMIT 5
SELECT CONCAT(actor,' ',director) AS crew, SUM(worldwide_gross - budget) AS total_profit GROUP BY crew ORDER BY total_profit DESC LIMIT 5

8. HAVING

SELECT actor, AVG(screens) AS opening FROM movies GROUP BY actor HAVING opening > 1000 ORDER BY opening DESC

9. CASE

SELECT title, (worldwide_gross - budget) profit,
CASE
	WHEN (worldwide_gross - budget) > 1000000000 THEN "SUPER HIT"
	WHEN (worldwide_gross - budget) > 250000000 AND (worldwide_gross - budget) < 1000000000 THEN "HIT"
	WHEN (worldwide_gross - budget) > 0 AND (worldwide_gross - budget) < 250000000 THEN "AVERAGE"
	ELSE "FLOP"
END AS verdict
FROM movies

10. JOINS

	1) CARTESIAN PRODUCT [CROSS JOIN]
	SELECT * FROM users CROSS JOIN groups

	2) INNER JOIN [DEFAULT]
	SELECT * FROM membership m JOIN users u ON m.uid = u.id

	3) LEFT OUTER JOIN
	SELECT * FROM membership m LEFT OUTER JOIN users u ON m.uid = u.id

	4) RIGHT OUTER JOIN
	SELECT * FROM membership m RIGHT OUTER JOIN users u ON m.uid = u.id

	5) UNION
	SELECT id FROM users
	UNION
	SELECT gid FROM groups

	in above, number of columns should be the same for both the tables and also, the datatypes of columns should also be the same.

	6) FULL OUTER JOIN
	SELECT * FROM membership m LEFT OUTER JOIN users u ON m.uid = u.id
	UNION
	SELECT * FROM membership m RIGHT OUTER JOIN users u ON m.uid = u.id

	7) SELF JOIN
	SELECT u1.name,u2.name FROM users u1 JOIN users u2 ON u1.emergency_contact = u2.id


JOIN EXAMPLES:

SELECT name,gname FROM membership m JOIN users u ON m.uid = u.id JOIN groups g ON m.gid = g.gid

12. SUBQUERY

INDEPENDENT SUBQUERIES

	Find movie with max budget
	SELECT * FROM movies WHERE budget = (SELECT MAX(budget) FROM movies)
	
	Find actor whose name starts with A
	SELECT actor FROM movies WHERE actor IN (SELECT DISTINCT(actor) FROM movies WHERE actor LIKE 'A%')

	Find movies of top actors
	SELECT * FROM movies WHERE actor IN (SELECT actor FROM (SELECT actor,SUM(worldwide_gross - budget) AS profit FROM movies GROUP BY actor ORDER BY profit DESC LIMIT 5) A)

	Key point to remember: Reference for the table is given only in case of FROM but not in case of WHERE


CORRELATED QUERIES

	Find the most hit movie of each genre
	SELECT title,genre,(worldwide_gross - budget) AS profit FROM movies m1 WEHRE (worldwide_gross - budget) = (SELECT MAX(worldwide_gross - budget) FROM movies m2 WHERE m2.genre = m1.genre)
